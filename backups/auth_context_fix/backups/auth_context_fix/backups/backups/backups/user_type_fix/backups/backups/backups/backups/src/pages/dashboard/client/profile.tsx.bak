// src/pages/dashboard/client/profile.tsx
import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { User, Mail, Phone, Lock, Eye, EyeOff, Save, Plus } from 'lucide-react';
import { ClientDashboardLayout } from '../../../components/layout/ClientDashboardLayout';
import ProtectedRoute from '../../../components/auth/ProtectedRoute';
import { useAuth } from '\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./auth_context_fix/backups/auth_context_fix/src/contexts/AuthContext\.tsx';
import { useToast } from '../../../contexts/ToastContext';

interface ProfileFormData {
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
}

interface PasswordFormData {
  current_password: string;
  new_password: string;
  confirm_password: string;
}

interface AddressFormData {
  street: string;
  number: string;
  complement: string;
  neighborhood: string;
  city: string;
  state: string;
  postal_code: string;
  is_default: boolean;
}

const ClientProfilePage: React.FC = () => {
  const { user, isLoading } = useAuth();
  const { showToast } = useToast();
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isAddingAddress, setIsAddingAddress] = useState(false);
  
  // Mock data para endereços
  const [addresses, setAddresses] = useState([
    {
      id: '1',
      street: 'Rua das Flores',
      number: '123',
      complement: 'Apto 45',
      neighborhood: 'Jardim Paulista',
      city: 'São Paulo',
      state: 'SP',
      postal_code: '01452-002',
      is_default: true
    }
  ]);

  // Form para perfil
  const { 
    register: registerProfile, 
    handleSubmit: handleSubmitProfile, 
    reset: resetProfile,
    formState: { errors: profileErrors, isSubmitting: isSubmittingProfile }
  } = useForm<ProfileFormData>();

  // Form para senha
  const { 
    register: registerPassword, 
    handleSubmit: handleSubmitPassword, 
    reset: resetPassword,
    watch: watchPassword,
    formState: { errors: passwordErrors, isSubmitting: isSubmittingPassword }
  } = useForm<PasswordFormData>();

  // Form para endereço
  const { 
    register: registerAddress, 
    handleSubmit: handleSubmitAddress, 
    reset: resetAddress,
    formState: { errors: addressErrors, isSubmitting: isSubmittingAddress }
  } = useForm<AddressFormData>({
    defaultValues: {
      is_default: false
    }
  });

  // Carregar dados do usuário no formulário
  useEffect(() => {
    if (user) {
      resetProfile({
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        email: user.email || '',
        phone: user.phone || ''
      });
    }
  }, [user, resetProfile]);

  // Observar o valor da nova senha para validação
  const newPassword = watchPassword('new_password');

  // Atualizar perfil
  const onSubmitProfile = async (data: ProfileFormData) => {
    try {
      // Em uma aplicação real, faríamos uma chamada à API
      // await api.put('/user/profile', data);
      
      // Simulando o sucesso da operação
      setTimeout(() => {
        showToast('Perfil atualizado com sucesso!', 'success');
      }, 800);
    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      showToast('Erro ao atualizar perfil. Tente novamente.', 'error');
    }
  };

  // Alterar senha
  const onSubmitPassword = async (data: PasswordFormData) => {
    try {
      // Em uma aplicação real, faríamos uma chamada à API
      // await api.put('/user/password', data);
      
      // Simulando o sucesso da operação
      setTimeout(() => {
        showToast('Senha alterada com sucesso!', 'success');
        resetPassword();
      }, 800);
    } catch (error) {
      console.error('Erro ao alterar senha:', error);
      showToast('Erro ao alterar senha. Verifique se a senha atual está correta.', 'error');
    }
  };

  // Adicionar endereço
  const onSubmitAddress = async (data: AddressFormData) => {
    try {
      // Em uma aplicação real, faríamos uma chamada à API
      // await api.post('/user/addresses', data);
      
      // Simulando o sucesso da operação
      setTimeout(() => {
        // Se o novo endereço for definido como padrão, atualiza os outros
        if (data.is_default) {
          setAddresses(prev => prev.map(addr => ({
            ...addr,
            is_default: false
          })));
        }
        
        // Adiciona o novo endereço
        const newAddress = {
          id: Date.now().toString(),
          ...data
        };
        
        setAddresses(prev => [...prev, newAddress]);
        showToast('Endereço adicionado com sucesso!', 'success');
        resetAddress();
        setIsAddingAddress(false);
      }, 800);
    } catch (error) {
      console.error('Erro ao adicionar endereço:', error);
      showToast('Erro ao adicionar endereço. Tente novamente.', 'error');
    }
  };

  // Definir endereço como padrão
  const setDefaultAddress = (addressId: string) => {
    setAddresses(prev => prev.map(addr => ({
      ...addr,
      is_default: addr.id === addressId
    })));
    
    showToast('Endereço padrão atualizado!', 'success');
  };

  // Remover endereço
  const removeAddress = (addressId: string) => {
    setAddresses(prev => prev.filter(addr => addr.id !== addressId));
    showToast('Endereço removido com sucesso!', 'success');
  };

  return (
    <ProtectedRoute allowedRoles={['client']}>
      <ClientDashboardLayout title="Meu Perfil - Agenda Livre">
        <div className="p-4 lg:p-6">
          <h1 className="text-2xl font-medium mb-6">Meu Perfil</h1>
          
          {isLoading ? (
            <div className="py-12 flex items-center justify-center">
              <div className="animate-pulse text-gray-500">Carregando...</div>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Meus Endereços */}
              <div className="bg-white p-5 rounded-xl shadow-sm lg:col-span-2">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-medium">Meus Endereços</h2>
                  <button 
                    onClick={() => setIsAddingAddress(!isAddingAddress)}
                    className="text-sm font-medium text-purple-600 flex items-center"
                  >
                    {isAddingAddress ? (
                      'Cancelar'
                    ) : (
                      <>
                        <Plus size={16} className="mr-1" />
                        Adicionar Endereço
                      </>
                    )}
                  </button>
                </div>
                
                {/* Formulário para adicionar endereço */}
                {isAddingAddress && (
                  <form onSubmit={handleSubmitAddress(onSubmitAddress)} className="mb-6 bg-gray-50 p-4 rounded-lg">
                    <h3 className="font-medium mb-3">Novo Endereço</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <label htmlFor="street" className="block text-sm font-medium text-gray-700 mb-1">
                          Rua
                        </label>
                        <input
                          id="street"
                          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            addressErrors.street ? 'border-red-500' : 'border-gray-200'
                          }`}
                          {...registerAddress('street', { required: 'Rua é obrigatória' })}
                        />
                        {addressErrors.street && (
                          <p className="mt-1 text-sm text-red-600">
                            {addressErrors.street.message}
                          </p>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label htmlFor="number" className="block text-sm font-medium text-gray-700 mb-1">
                            Número
                          </label>
                          <input
                            id="number"
                            className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                              addressErrors.number ? 'border-red-500' : 'border-gray-200'
                            }`}
                            {...registerAddress('number', { required: 'Número é obrigatório' })}
                          />
                          {addressErrors.number && (
                            <p className="mt-1 text-sm text-red-600">
                              {addressErrors.number.message}
                            </p>
                          )}
                        </div>
                        
                        <div>
                          <label htmlFor="complement" className="block text-sm font-medium text-gray-700 mb-1">
                            Complemento
                          </label>
                          <input
                            id="complement"
                            className="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600"
                            {...registerAddress('complement')}
                          />
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <label htmlFor="neighborhood" className="block text-sm font-medium text-gray-700 mb-1">
                          Bairro
                        </label>
                        <input
                          id="neighborhood"
                          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            addressErrors.neighborhood ? 'border-red-500' : 'border-gray-200'
                          }`}
                          {...registerAddress('neighborhood', { required: 'Bairro é obrigatório' })}
                        />
                        {addressErrors.neighborhood && (
                          <p className="mt-1 text-sm text-red-600">
                            {addressErrors.neighborhood.message}
                          </p>
                        )}
                      </div>
                      
                      <div>
                        <label htmlFor="postal_code" className="block text-sm font-medium text-gray-700 mb-1">
                          CEP
                        </label>
                        <input
                          id="postal_code"
                          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            addressErrors.postal_code ? 'border-red-500' : 'border-gray-200'
                          }`}
                          placeholder="00000-000"
                          {...registerAddress('postal_code', { 
                            required: 'CEP é obrigatório',
                            pattern: {
                              value: /^\d{5}-?\d{3}$/,
                              message: 'CEP inválido: 00000-000'
                            }
                          })}
                        />
                        {addressErrors.postal_code && (
                          <p className="mt-1 text-sm text-red-600">
                            {addressErrors.postal_code.message}
                          </p>
                        )}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-1">
                          Cidade
                        </label>
                        <input
                          id="city"
                          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            addressErrors.city ? 'border-red-500' : 'border-gray-200'
                          }`}
                          {...registerAddress('city', { required: 'Cidade é obrigatória' })}
                        />
                        {addressErrors.city && (
                          <p className="mt-1 text-sm text-red-600">
                            {addressErrors.city.message}
                          </p>
                        )}
                      </div>
                      
                      <div>
                        <label htmlFor="state" className="block text-sm font-medium text-gray-700 mb-1">
                          Estado
                        </label>
                        <select
                          id="state"
                          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            addressErrors.state ? 'border-red-500' : 'border-gray-200'
                          }`}
                          {...registerAddress('state', { required: 'Estado é obrigatório' })}
                        >
                          <option value="">Selecione um estado</option>
                          <option value="AC">Acre</option>
                          <option value="AL">Alagoas</option>
                          <option value="AP">Amapá</option>
                          <option value="AM">Amazonas</option>
                          <option value="BA">Bahia</option>
                          <option value="CE">Ceará</option>
                          <option value="DF">Distrito Federal</option>
                          <option value="ES">Espírito Santo</option>
                          <option value="GO">Goiás</option>
                          <option value="MA">Maranhão</option>
                          <option value="MT">Mato Grosso</option>
                          <option value="MS">Mato Grosso do Sul</option>
                          <option value="MG">Minas Gerais</option>
                          <option value="PA">Pará</option>
                          <option value="PB">Paraíba</option>
                          <option value="PR">Paraná</option>
                          <option value="PE">Pernambuco</option>
                          <option value="PI">Piauí</option>
                          <option value="RJ">Rio de Janeiro</option>
                          <option value="RN">Rio Grande do Norte</option>
                          <option value="RS">Rio Grande do Sul</option>
                          <option value="RO">Rondônia</option>
                          <option value="RR">Roraima</option>
                          <option value="SC">Santa Catarina</option>
                          <option value="SP">São Paulo</option>
                          <option value="SE">Sergipe</option>
                          <option value="TO">Tocantins</option>
                        </select>
                        {addressErrors.state && (
                          <p className="mt-1 text-sm text-red-600">
                            {addressErrors.state.message}
                          </p>
                        )}
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                          {...registerAddress('is_default')}
                        />
                        <span className="ml-2 text-sm text-gray-600">
                          Definir como endereço padrão
                        </span>
                      </label>
                    </div>
                    
                    <div className="flex space-x-3">
                      <button
                        type="button"
                        onClick={() => setIsAddingAddress(false)}
                        className="flex-1 py-2 text-center border border-gray-200 text-gray-700 rounded-lg text-sm"
                      >
                        Cancelar
                      </button>
                      <button
                        type="submit"
                        disabled={isSubmittingAddress}
                        className="flex-1 py-2 flex items-center justify-center bg-purple-600 text-white rounded-lg text-sm font-medium"
                      >
                        <Save size={16} className="mr-1" />
                        {isSubmittingAddress ? 'Salvando...' : 'Salvar Endereço'}
                      </button>
                    </div>
                  </form>
                )}
                
                {/* Lista de endereços */}
                {addresses.length === 0 ? (
                  <div className="bg-gray-50 p-4 rounded-lg text-center text-gray-500">
                    Você não possui endereços cadastrados
                  </div>
                ) : (
                  <div className="space-y-3">
                    {addresses.map(address => (
                      <div key={address.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between">
                          <div>
                            <div className="flex items-center">
                              <h3 className="font-medium">
                                {address.street}, {address.number}
                                {address.complement && ` - ${address.complement}`}
                              </h3>
                              {address.is_default && (
                                <span className="ml-2 bg-purple-100 text-purple-700 text-xs px-2 py-0.5 rounded-full">
                                  Padrão
                                </span>
                              )}
                            </div>
                            <p className="text-sm text-gray-600 mt-1">
                              {address.neighborhood}, {address.city} - {address.state}
                            </p>
                            <p className="text-sm text-gray-600">
                              CEP: {address.postal_code}
                            </p>
                          </div>
                          <div className="flex space-x-2">
                            {!address.is_default && (
                              <button
                                onClick={() => setDefaultAddress(address.id)}
                                className="text-purple-600 text-sm"
                              >
                                Tornar padrão
                              </button>
                            )}
                            <button
                              onClick={() => removeAddress(address.id)}
                              className="text-red-600 text-sm"
                            >
                              Remover
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              
              {/* Dados Pessoais */}
              <div className="bg-white p-5 rounded-xl shadow-sm">
                <h2 className="text-lg font-medium mb-4">Dados Pessoais</h2>
                
                <form onSubmit={handleSubmitProfile(onSubmitProfile)} className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="first_name" className="block text-sm font-medium text-gray-700 mb-1">
                        Nome
                      </label>
                      <div className="relative">
                        <input
                          id="first_name"
                          type="text"
                          className={`w-full p-3 pl-10 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            profileErrors.first_name ? 'border-red-500' : 'border-gray-200'
                          }`}
                          placeholder="Maria"
                          {...registerProfile('first_name', { 
                            required: 'Nome é obrigatório'
                          })}
                        />
                        <User className="absolute left-3 top-3.5 h-4 w-4 text-gray-400" />
                      </div>
                      {profileErrors.first_name && (
                        <p className="mt-1 text-sm text-red-600">
                          {profileErrors.first_name.message}
                        </p>
                      )}
                    </div>
                    
                    <div>
                      <label htmlFor="last_name" className="block text-sm font-medium text-gray-700 mb-1">
                        Sobrenome
                      </label>
                      <div className="relative">
                        <input
                          id="last_name"
                          type="text"
                          className={`w-full p-3 pl-10 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                            profileErrors.last_name ? 'border-red-500' : 'border-gray-200'
                          }`}
                          placeholder="Silva"
                          {...registerProfile('last_name', { 
                            required: 'Sobrenome é obrigatório'
                          })}
                        />
                        <User className="absolute left-3 top-3.5 h-4 w-4 text-gray-400" />
                      </div>
                      {profileErrors.last_name && (
                        <p className="mt-1 text-sm text-red-600">
                          {profileErrors.last_name.message}
                        </p>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                      Email
                    </label>
                    <div className="relative">
                      <input
                        id="email"
                        type="email"
                        className={`w-full p-3 pl-10 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                          profileErrors.email ? 'border-red-500' : 'border-gray-200'
                        }`}
                        placeholder="seu@email.com"
                        {...registerProfile('email', {
                          required: 'Email é obrigatório',
                          pattern: {
                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                            message: 'Email inválido'
                          }
                        })}
                      />
                      <Mail className="absolute left-3 top-3.5 h-4 w-4 text-gray-400" />
                    </div>
                    {profileErrors.email && (
                      <p className="mt-1 text-sm text-red-600">
                        {profileErrors.email.message}
                      </p>
                    )}
                  </div>
                  
                  <div>
                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                      Telefone
                    </label>
                    <div className="relative">
                      <input
                        id="phone"
                        type="tel"
                        className={`w-full p-3 pl-10 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                          profileErrors.phone ? 'border-red-500' : 'border-gray-200'
                        }`}
                        placeholder="(11) 99999-9999"
                        {...registerProfile('phone', {
                          required: 'Telefone é obrigatório',
                          pattern: {
                            value: /^(\(\d{2}\)\s?)?\d{4,5}-?\d{4}$/,
                            message: 'Telefone inválido: (11) 99999-9999'
                          }
                        })}
                      />
                      <Phone className="absolute left-3 top-3.5 h-4 w-4 text-gray-400" />
                    </div>
                    {profileErrors.phone && (
                      <p className="mt-1 text-sm text-red-600">
                        {profileErrors.phone.message}
                      </p>
                    )}
                  </div>
                  
                  <button
                    type="submit"
                    disabled={isSubmittingProfile}
                    className="w-full py-3 bg-purple-600 text-white font-medium rounded-xl hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                  >
                    <Save size={18} className="mr-2" />
                    {isSubmittingProfile ? 'Salvando...' : 'Salvar Alterações'}
                  </button>
                </form>
              </div>
              
              {/* Alterar Senha */}
              <div className="bg-white p-5 rounded-xl shadow-sm">
                <h2 className="text-lg font-medium mb-4">Alterar Senha</h2>
                
                <form onSubmit={handleSubmitPassword(onSubmitPassword)} className="space-y-4">
                  <div>
                    <label htmlFor="current_password" className="block text-sm font-medium text-gray-700 mb-1">
                      Senha Atual
                    </label>
                    <div className="relative">
                      <input
                        id="current_password"
                        type={showCurrentPassword ? "text" : "password"}
                        className={`w-full p-3 pl-10 border rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-600 ${
                          passwordErrors.current_password ? 'border-red-500' : 'border-gray-200'
                        }`}
                        placeholder="********"
                        {...registerPassword('current_password', {
                          required: 'Senha atual é obrigatória'
                        })}
                      />
                      <Lock className="absolute left-3 top-3.5 h-4 w-4 text-gray-400" />
                      <button
                        type="button"
                        className="absolute right-3 top-3.5 text-gray-400"
                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                      >
                        {showCurrentPassword ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                    {passwordErrors.confirm_password && (
                      <p className="mt-1 text-sm text-red-600">
                        {passwordErrors.confirm_password.message}
                      </p>
                    )}
                  </div>
                  
                  <button
                    type="submit"
                    disabled={isSubmittingPassword}
                    className="w-full py-3 bg-purple-600 text-white font-medium rounded-xl hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                  >
                    <Save size={18} className="mr-2" />
                    {isSubmittingPassword ? 'Alterando...' : 'Alterar Senha'}
                  </button>
                </form>
              </div>
            </div>
          )}
        </div>
      </ClientDashboardLayout>
    </ProtectedRoute>
  );
};

export default ClientProfilePage;