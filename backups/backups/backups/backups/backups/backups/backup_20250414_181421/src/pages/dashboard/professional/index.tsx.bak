// src/pages/dashboard/professional/index.tsx
import React, { useState, useEffect } from 'react';
import { Calendar, DollarSign, Users, TrendingUp, Clock, Bell, Settings } from 'lucide-react';
import { ProfessionalDashboardLayout } from '../../../components/layout/ProfessionalDashboardLayout';
import { useAuth } from '\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./\.\./auth_context_fix/backups/auth_context_fix/backups/auth_context_fix/backups/auth_context_fix/src/contexts/AuthContext\.tsx';
import { useNotifications } from '../../../hooks/useNotifications';
import AnalyticsDashboard from '../../../components/analytics/AnalyticsDashboard';
import { NotificationDropdown } from '../../../components/notifications/NotificationDropdown';
import Link from 'next/link';

const ProfessionalDashboard = () => {
  const { user } = useAuth();
  const { notifications, unreadCount } = useNotifications();
  const [upcomingAppointments, setUpcomingAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // Simula a chamada de API para buscar agendamentos próximos
  useEffect(() => {
    // Em produção, você substituiria isso por uma chamada real à API
    const fetchUpcomingAppointments = async () => {
      // Simula um delay de rede
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Dados simulados
      const mockAppointments = [
        {
          id: '1',
          client: 'Maria Silva',
          service: 'Box Braids',
          date: '2025-04-14T14:30:00',
          price: 250.0,
          status: 'confirmed'
        },
        {
          id: '2',
          client: 'João Santos',
          service: 'Twist Senegalês',
          date: '2025-04-15T09:00:00',
          price: 290.0,
          status: 'pending'
        },
        {
          id: '3',
          client: 'Paula Oliveira',
          service: 'Penteado para Festa',
          date: '2025-04-16T16:00:00',
          price: 150.0,
          status: 'confirmed'
        }
      ];
      
      setUpcomingAppointments(mockAppointments);
      setLoading(false);
    };
    
    fetchUpcomingAppointments();
  }, []);

  // Formata a data para exibição
  const formatAppointmentDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('pt-BR', { 
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Renderiza o status do agendamento
  const renderAppointmentStatus = (status) => {
    switch (status) {
      case 'confirmed':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
            Confirmado
          </span>
        );
      case 'pending':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
            Pendente
          </span>
        );
      case 'completed':
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
            Concluído
          </span>
        );
      default:
        return (
          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
            {status}
          </span>
        );
    }
  };

  return (
    <ProfessionalDashboardLayout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
        {/* Cabeçalho da página com saudação e notificações */}
        <div className="mb-6 flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-medium">Olá, {user?.first_name || 'Profissional'}</h1>
            <p className="text-gray-500 mt-1">Bem-vindo(a) ao seu dashboard</p>
          </div>
          <div className="flex items-center space-x-2">
            <NotificationDropdown />
            <Link href="/dashboard/professional/settings">
              <a className="p-2 rounded-full hover:bg-gray-100">
                <Settings size={20} className="text-gray-700" />
              </a>
            </Link>
          </div>
        </div>
        
        {/* Próximos agendamentos */}
        <div className="mb-8 bg-white p-4 rounded-xl border border-gray-200">
          <h2 className="text-lg font-medium mb-4">Próximos Agendamentos</h2>
          
          {loading ? (
            <div className="py-4 text-center text-gray-500">Carregando agendamentos...</div>
          ) : upcomingAppointments.length === 0 ? (
            <div className="py-4 text-center text-gray-500">Você não tem agendamentos próximos.</div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Cliente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Serviço
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Data
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Valor
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ações
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {upcomingAppointments.map((appointment) => (
                    <tr key={appointment.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{appointment.client}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{appointment.service}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{formatAppointmentDate(appointment.date)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">R$ {appointment.price.toFixed(2)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {renderAppointmentStatus(appointment.status)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-purple-600">
                        <Link href={`/dashboard/professional/appointments/${appointment.id}`}>
                          <a className="hover:text-purple-800">Ver detalhes</a>
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
          
          <div className="mt-4 text-right">
            <Link href="/dashboard/professional/appointments">
              <a className="text-sm text-purple-600 hover:text-purple-800">
                Ver todos os agendamentos →
              </a>
            </Link>
          </div>
        </div>
        
        {/* Dashboard Analítico */}
        <AnalyticsDashboard />
      </div>
    </ProfessionalDashboardLayout>
  );
};

export default ProfessionalDashboard;